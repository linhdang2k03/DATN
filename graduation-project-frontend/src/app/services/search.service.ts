import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from '../environments/environment';
import { Observable } from 'rxjs';
import { Product } from '../models/product';
import { Search } from '../models/search';

@Injectable({
  providedIn: 'root'
})
export class SearchService {
  private baseUrl = `${environment.apiBaseUrl}/search`;

  constructor(private http: HttpClient) {}

  // üîê H√†m t·∫°o headers k√®m token n·∫øu c√≥
  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('access_token');
    let headers = new HttpHeaders().set('Content-Type', 'application/json');
    if (token) {
      headers = headers.set('Authorization', `Bearer ${token}`);
    }
    return headers;
  }

  // üîç T√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a
  searchByKeyword(keyword: string): Observable<Product[]> {
    const headers = this.getAuthHeaders();

    if (!headers.has('Authorization')) {
      console.warn('‚ùó Kh√¥ng c√≥ token ‚Äî y√™u c·∫ßu t√¨m ki·∫øm c√≥ th·ªÉ b·ªã t·ª´ ch·ªëi.');
    }

    return this.http.get<Product[]>(`${this.baseUrl}?keyword=${encodeURIComponent(keyword)}`, {
      headers
    });
  }

  // üß† G·ª£i √Ω s·∫£n ph·∫©m t·ª´ AI ‚Äî c√≥ th·ªÉ truy·ªÅn ho·∫∑c kh√¥ng truy·ªÅn keyword
  getRecommendations(keyword?: string): Observable<Product[]> {
    const headers = this.getAuthHeaders();
    const body = keyword ? { keyword } : {}; // n·∫øu kh√¥ng c√≥ keyword, backend s·∫Ω t·ª± l·∫•y theo l·ªãch s·ª≠

    return this.http.post<Product[]>(`${this.baseUrl}/recommendations`, body, {
      headers
    });
  }

  getSearchStats(): Observable<Search[]> {
  const headers = this.getAuthHeaders();
  return this.http.get<Search[]>(`${this.baseUrl}/keyword-stats`, { headers });
}

}
